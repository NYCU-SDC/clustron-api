openapi: 3.1.0
info:
  title: Clustron API
  version: 1.0.0
tags:
  - name: Group
  - name: User
  - name: Auth
  - name: Admin
paths:
  /api/groups:
    get:
      operationId: Groups_getGroups
      description: Get all groups of the user.
      parameters:
        - $ref: '#/components/parameters/PaginatedParams.page'
        - $ref: '#/components/parameters/PaginatedParams.size'
        - $ref: '#/components/parameters/PaginatedParams.sort'
        - $ref: '#/components/parameters/PaginatedParams.sortBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - totalPages
                  - totalItems
                  - currentPage
                  - pageSize
                  - hasNextPage
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Groups.GroupResponse'
                  totalPages:
                    type: integer
                    format: int32
                    examples:
                      - 10
                  totalItems:
                    type: integer
                    format: int32
                    examples:
                      - 100
                  currentPage:
                    type: integer
                    format: int32
                    examples:
                      - 1
                  pageSize:
                    type: integer
                    format: int32
                    examples:
                      - 10
                  hasNextPage:
                    type: boolean
                    examples:
                      - true
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Group
    post:
      operationId: Groups_createGroup
      description: Create a new group. Only admin level can reach this endpoint.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups.GroupResponse'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Groups.CreateGroupRequest'
  /api/groups/{id}:
    get:
      operationId: Groups_getGroupById
      description: Get a group by id.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups.GroupResponse'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Group
  /api/groups/{id}/archive:
    post:
      operationId: Groups_archiveGroup
      description: Archive a group. Will reject the request from access level 'user', 'group-admin'.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Group
  /api/groups/{id}/members:
    get:
      operationId: Groups_getMembers
      description: Get all members of a group. Will reject the request from access level 'user'.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PaginatedParams.page'
        - $ref: '#/components/parameters/PaginatedParams.size'
        - $ref: '#/components/parameters/PaginatedParams.sort'
        - $ref: '#/components/parameters/PaginatedParams.sortBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - totalPages
                  - totalItems
                  - currentPage
                  - pageSize
                  - hasNextPage
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Groups.MemberResponse'
                  totalPages:
                    type: integer
                    format: int32
                    examples:
                      - 10
                  totalItems:
                    type: integer
                    format: int32
                    examples:
                      - 100
                  currentPage:
                    type: integer
                    format: int32
                    examples:
                      - 1
                  pageSize:
                    type: integer
                    format: int32
                    examples:
                      - 10
                  hasNextPage:
                    type: boolean
                    examples:
                      - true
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Group
    post:
      operationId: Groups_addMember
      description: Add a member to a group. Will reject the request from access level 'user'.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups.MemberResponse'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Groups.AddMemberRequest'
  /api/groups/{id}/members/{memberId}:
    delete:
      operationId: Groups_removeMember
      description: Remove a member from a group. Will reject the request from access level 'user'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Group
    put:
      operationId: Groups_updateMember
      description: Update a member's access level.  Will reject the request from access level 'user'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups.MemberResponse'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Groups.UpdateMemberRequest'
  /api/groups/{id}/unarchive:
    post:
      operationId: Groups_unarchiveGroup
      description: Unarchive a group. Will reject the request from access level 'user', 'group-admin'.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Group
  /api/login/oauth/{provider}:
    get:
      operationId: Auth_loginGoogle
      parameters:
        - name: provider
          in: path
          required: true
          description: The OAuth2 provider to use for login.
          schema:
            $ref: '#/components/schemas/Auth.OAuthProviders'
        - name: c
          in: query
          required: true
          description: The callback URL of the OAuth2 login. [See details](https://clustron.atlassian.net/wiki/spaces/cd/pages/18219016/Backend+OAuth+JWT+Manual)
          schema:
            type: string
          explode: false
        - name: r
          in: query
          required: false
          description: The redirect URL for login callback.
          schema:
            type: string
          explode: false
      responses:
        '302':
          description: Redirection
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Auth
  /api/publickey:
    get:
      operationId: Settings_getPublicKey
      parameters:
        - name: short
          in: query
          required: false
          description: Get 10 head characters of publickey as short public key in 'publickey' field.
          schema:
            type: boolean
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Settings.PublicKey'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - User
    post:
      operationId: Settings_addPublicKey
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings.PublicKey'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings.AddPublicKeyRequest'
    delete:
      operationId: Settings_deletePublicKey
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
        '404':
          description: The server cannot find the requested resource.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings.DeletePublicKeyRequest'
  /api/refreshToken/{refreshToken}:
    get:
      operationId: Auth_refreshToken
      parameters:
        - name: refreshToken
          in: path
          required: true
          description: The refresh token to use for refreshing the access token.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth.RefreshToken'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Auth
  /api/roles:
    get:
      operationId: Admin_getRoleAccessLevelMapping
      description: get all mapping between group wise role and group wise access level
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Groups.Role'
        '403':
          description: Access is forbidden.
      tags:
        - Admin
    post:
      operationId: Admin_postRoleAccessLevelMapping
      description: post new mapping between group wise role and group wise access level
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Groups.Role'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '403':
          description: Access is forbidden.
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin.CreateRoleRequest'
  /api/roles/{id}:
    delete:
      operationId: Admin_deleteRoleAccessLevelMapping
      description: delete mapping between group wise role and group wise access level
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
        '403':
          description: Access is forbidden.
      tags:
        - Admin
    put:
      operationId: Admin_putRoleAccessLevelMapping
      description: update mapping between group wise role and group wise access level
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Groups.Role'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '403':
          description: Access is forbidden.
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin.CreateRoleRequest'
  /api/settings:
    get:
      operationId: Settings_getUserSettings
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings.UserSettings'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - User
    put:
      operationId: Settings_updateSettings
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings.UserSettings'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings.UserSettings'
components:
  parameters:
    PaginatedParams.page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        format: int32
      explode: false
    PaginatedParams.size:
      name: size
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
      explode: false
    PaginatedParams.sort:
      name: sort
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
      explode: false
    PaginatedParams.sortBy:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
      explode: false
  schemas:
    Admin.CreateRoleRequest:
      type: object
      required:
        - role
        - accessLevel
      properties:
        role:
          type: string
          description: The name of the role.
        accessLevel:
          type: string
          description: The access level of the role.
    Auth.OAuthProviders:
      type: string
      enum:
        - google
        - nycu
    Auth.RefreshToken:
      type: object
      required:
        - accessToken
        - expirationTime
        - refreshToken
      properties:
        accessToken:
          type: string
          description: The new JWT
        expirationTime:
          type: integer
          description: The expiration date of the refresh token.
        refreshToken:
          type: string
          description: The new refresh token.
    Groups.AccessLevel:
      type: string
      enum:
        - groupOwner
        - groupAdmin
        - user
    Groups.AddMemberRequest:
      type: object
      required:
        - member
        - role
      properties:
        member:
          anyOf:
            - $ref: '#/components/schemas/email'
            - type: string
          description: The email or student id of the user.
        role:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The access level of the user.
    Groups.CreateGroupRequest:
      type: object
      required:
        - title
        - description
        - members
      properties:
        title:
          type: string
        description:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/Groups.AddMemberRequest'
    Groups.GroupResponse:
      type: object
      required:
        - id
        - title
        - description
        - isArchived
        - createdAt
        - updatedAt
        - me
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        title:
          type: string
        description:
          type: string
        isArchived:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
        me:
          anyOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - membership
                  description: The user is a member of the group.
                role:
                  $ref: '#/components/schemas/Groups.Role'
              required:
                - type
                - role
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - adminOverride
                  description: The admin user is not a member of the group.
              required:
                - type
    Groups.MemberResponse:
      type: object
      required:
        - id
        - fullName
        - email
        - studentId
        - role
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        fullName:
          type: string
        email:
          $ref: '#/components/schemas/email'
        studentId:
          type: string
        role:
          $ref: '#/components/schemas/Groups.Role'
    Groups.Role:
      type: object
      required:
        - id
        - role
        - accessLevel
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        role:
          type: string
        accessLevel:
          $ref: '#/components/schemas/Groups.AccessLevel'
    Groups.UpdateMemberRequest:
      type: object
      required:
        - id
        - role
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        role:
          $ref: '#/components/schemas/uuid'
    Settings.AddPublicKeyRequest:
      type: object
      required:
        - title
        - publicKey
      properties:
        title:
          type: string
          description: The public key title set by the user.
        publicKey:
          type: string
          description: The public key of the user.
    Settings.DeletePublicKeyRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: The public key id in UUID format.
    Settings.PublicKey:
      type: object
      required:
        - id
        - title
        - publicKey
      properties:
        id:
          type: string
          description: The public key id in UUID format.
        title:
          type: string
          description: The public key title set by the user.
        publicKey:
          type: string
          description: The public key of the user.
    Settings.UserSettings:
      type: object
      required:
        - fullName
        - linuxUsername
      properties:
        fullName:
          type: string
          description: The real name of the user.
        linuxUsername:
          type: string
          description: The computer account name of the user.
    Versions:
      type: string
      enum:
        - 1.0.0
    email:
      type: string
      format: email
    uuid:
      type: string
      format: uuid
servers:
  - url: https://example.com
    description: Single server endpoint
    variables: {}
